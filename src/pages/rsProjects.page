<apex:page controller="rsProjectsController" showHeader="false" sidebar="false" docType="html-5.0" >
	<apex:includeScript value="{!$Resource.jquery}"/>

	<apex:stylesheet value="{!URLFOR($Resource.bootstrap, 'css/bootstrap.min.css')}"/>
  <apex:stylesheet value="{!$Resource.qtip}/jquery.qtip.min.css"/>
  <apex:stylesheet value="{!$Resource.profilescommon}"/>
	<apex:includeScript value="{!$Resource.bootstrap}/js/bootstrap.min.js"/>
	<apex:includeScript value="{!$Resource.jqueryui}/jquery-ui.js"/>
  <apex:includeScript value="{!$Resource.qtip}/jquery.qtip.min.js"/>
  <script type='text/javascript' src='/canvas/sdk/js/publisher.js'/>
  <meta name="viewport" content="width=device-width, initial-scale=1,minimum-scale=1, maximum-scale=1, user-scalable=no"/>
  <style type="text/css">
    a.accordion-toggle:after {
        font-family: 'Glyphicons Halflings';
        content: '\e114';
        font-size: 10px;
    }
    a.accordion-toggle.collapsed:after {
        content: '\e080';
    }
  </style>
  <script>

      function resize() {
          console.log('SEND RESIZE FROM VF PAGE');
          Sfdc.canvas.publisher.resize( {width : '100%', height : '3000px'});
      }
      function updateDisplay(msg) {
         console.log('GOT EVENT IN VF PAGE: ', msg);
      }

      Sfdc.canvas.onReady(function() {
        Sfdc.canvas.publisher.subscribe({name : "sfdc.resize", onData : function(e) {
          console.log(e); 
          updateDisplay('sfdc.resize');
          }
        });
      });

      console.log('VFpage rendered');

      var $j = jQuery.noConflict();
      var states;
      var inProgress = false;
      var sortDir = ["",""];
      var saveType;
      function resetProgress() {
          inProgress = false;
      }
      //Retrieves State list from JSON file
      $j.getJSON('{!$Resource.StatesAndCountries}',function(json){
        states = json;
      });
       $j(function() {
          $j( "#tabs" ).tabs({ active: getTab()});
          resize();            
       });

       $j(document).ready(function() {
          if( ( typeof sforce != 'undefined' ) && sforce && sforce.one ) {
          //AECR-698, known issue with Salesforce, workaround is to open a child window
          // and add a parameter so we still know it's in SF1
          sforce.one.back();
          window.open('/apex/rsProjects?sfone=true');
          }
          window.onbeforeunload = removeCollapsedCookies();
      });
       
      function setDatePickers() {
          $j('.date').datepicker({
            autoclose: true
          });
      }

      function setSubTabCookies(tab) {
        //Set Expiration to five minutes
        var exp = new Date();
        exp.setTime(exp.getTime() + 300000);
        var expires = "expires="+exp.toGMTString()+";";
        document.cookie="SQsubtab="+tab+";"+expires+"path=/;";
      }

      function setCollapsedCookie(tabId,tabClass) {
        var tabClassEdit;
        if(tabClass.indexOf("collapsed") > -1) {
          tabClassEdit = tabClass.replace("collapsed","");
        } else {
          tabClassEdit = tabClass + ' collapsed';
        }
        console.log('tabid: ' + tabId + ' tabclass: ' + tabClassEdit);
        document.cookie = tabId + "=" + tabClassEdit + ";" + "path=/;";
      }

      function restoreCollapsedSections() {
            var cookies = getCookies();
            for(var i = 0; i < cookies.length; i++) {
                var cookie = cookies[i].split("=");
                var tabId = cookie[0];
                var tabClass = cookie[1];
                if(j$('[id='+tabId+']').length) {
                    if(tabClass.indexOf("collapsed") > -1) {
                        j$('[id='+tabId+']').trigger("click");
                    }
                }
            }
        }

      function getCookie(cname) {
          var name = cname + "=";
          var ca = document.cookie.split(';');
          for(var i=0; i<ca.length; i++) {
              var c = ca[i];
              while (c.charAt(0)==' ') c = c.substring(1);
              if (c.indexOf(name) != -1) return c.substring(name.length, c.length);
          }
          return "";
      }

      function getCookies() {
        var cookies = [];
        var all = document.cookie;
        if( all === "" ) {
            return cookies;
        }
        var list = all.split("; ");
        for(var i = 0; i < list.length; i++) {
            var cookie = list[i];
            cookies.push(unescape(cookie));
        }
        return cookies;
      }

      function removeCollapsedCookies() {
        var cookies = getCookies();
        for(var i = 0; i < cookies.length; i++) {
          var cookie = cookies[i].split("=");
          var tabId = cookie[0];
          var tabClass = cookie[1];
          if(tabId.indexOf("CollapseLink") > -1) {
             document.cookie = tabId + "=" + tabClass + ";" + "path=/;" + "expires=Thu, 01 Jan 1970 00:00:00 GMT";
          }
        }
      }

      function getCookies() {
            var cookies = [];
            var all = document.cookie;
            if( all === "" ) {
              console.log('123 no cookies')
                return cookies;
            }
            var list = all.split("; ");
            for(var i = 0; i < list.length; i++) {
                var cookie = list[i];
                cookies.push(unescape(cookie));
            }
            return cookies;
      }

      function getTab() {
        var value = getParameterByName('tab.Projects.subtab');
        if(value === null) {
          value = getCookie('SQsubtab');
        }
        console.log(value);
        return value;
      }

      function getParameterByName(name) {
            var url = (window.location != window.parent.location) ? document.referrer: document.location;
            var match = RegExp('[?&]' + name + '=([^&]*)').exec(url);
            var value = match && decodeURIComponent(match[1].replace(/\+/g, ' '));
            console.log('getParameterByName for ' + name + ' returns : ' + value);
            return value;
      }

      function confirmDeletePart(){
        return confirm("{!$Label.Confirm_Delete_Part}");        
      }

      //Function to setup required fields for interaction
      function setupFields(type) {
        saveType = type;
        $j.each(requiredFields, function(index, item) {
            //Date Fields and Select lists do not fire off input event with DatePicker
            if($j(item).is('select') || item == '[id$=ProjectIdin]') {
              if(!(saveType == 'edit' && item == '[id$=ProjectIdin]')) {
                $j(item).on('change',function() {
                    var input = $j(this);
                    var notEmpty = input.val().trim();
                    if(notEmpty) {
                    input.removeClass('invalid').addClass('valid');
                    } else {
                    input.removeClass('valid').addClass('invalid');
                    }
                });
              }
            } else {
              $j(item).on('input',function() {
                  var input = $j(this);
                  var notEmpty = input.val().trim();
                  if(notEmpty) {
                  input.removeClass('invalid').addClass('valid');
                  } else {
                  input.removeClass('valid').addClass('invalid');
                  }
              });
              $j(item).on('focus',function() {
                  var input = $j(this);
                  var notEmpty = input.val().trim();
                  if(notEmpty) {
                    input.removeClass('invalid').addClass('valid');
                  } else {
                    input.removeClass('valid').addClass('invalid');
                  }
              });
            }
        });
      }

      function checkRequiredFields() {
        var notValid = true;
        $j.each(requiredFields, function(index, item) {
          console.log(!$j(item).val());
            var errorMsg = $j('span.rsError',$j(item).parent());
            if(!$j(item).val().trim() && !(saveType == 'edit' && item == '[id$=ProjectIdin]') && $j(item).is(':visible')) {
              $j(item).removeClass('valid').addClass('invalid');
              if(item == '[id$=ProjectIdin]' || $j(item).parent().hasClass('dateInput')) {
                errorMsg = $j('span.rsError',$j(item).parent().parent());
              }
              errorMsg.show();
              notValid = false;
            } else {
              errorMsg.hide();
            }
          });
          return notValid;
      }
      
      function focusField(fieldId) {
        var el = $j('[id$='+fieldId+']').get(0);
        var elemLen = el.value.length;
        
        el.selectionStart = elemLen;
        el.selectionEnd = elemLen;
        el.focus();
      }

      function helpTextSetup() {
        $j('.helpOrb').each(function() {
              var elem = $j(this);
              elem.qtip({
                  content: true,
                  events: {
                      show: function(event, api) { elem.parent().removeClass('helpButton').addClass('helpButtonOn');},
                      hide: function(event, api) { elem.parent().removeClass('helpButtonOn').addClass('helpButton');}
                  }
              });
          });
      }

      function showSectionSpinner(headerId){
          $j("#"+headerId).toggleClass('active');
      }       

      // We have to clear out the apex:inputFields whenever we do anything other than save to clear out any SF validation errors
      function clearInputFields() {
          $j.each(inputFields, function(index, item) {
              $j(item).val("");
          });
      }
      

      //Defaults to User's Country on Adding a new Project
      function loadCountry(countryId) {
        var country = "{!profile.Obj['Country']}";
        console.log('#####: ' + country);
        if(country && $j('[id$=' + countryId +'] option[value="' + country + '"]').length) {
          $j('[id$=' + countryId + ']').val(country);
        }
        else {
           $j('[id$=' + countryId + ']').val("");
        }
      }

      //updates hidden input for state field
      function hiddenFieldUpdate(val,id) {
          $j('input[id$=' + id + ']').val(val);
      }

      function stateChange(key,listId,inputId) {
        console.log('key: ' + key);
        if(key) {
          $j('select[id$="' + listId + '"]').find('option').remove().end().append('<option value="">--None--</option>');
          var stateList = states[key];
          var startingVal;
          if($j('[id$=' + inputId + ']').val()) {
            startingVal = $j('[id$=' + inputId + ']').val();
          }
          $j.each(stateList, function(key, value) {
            if(value == startingVal) {
              $j('select[id$="' + listId + '"]').append('<option value="'+ value +'" selected>'+value+'</option>');
            } else {
              $j('select[id$="' + listId + '"]').append('<option value="'+ value +'">'+value+'</option>');
            }
          });
        }
      }

      function removeSpacesFromId() {
        $j('a[data-toggle=collapse]').each(function() {
          var dataTarget = $j(this).attr('data-target');
          var linkId = $j(this).attr('id');
          dataTarget = dataTarget.replace(/ /g, '_');
          linkId = linkId.replace(/ /g,'_');
          $j(this).attr('data-target',dataTarget);
          $j(this).attr('id',linkId);
        });
        $j('div.collapse').each(function() {
          var idField = $j(this).attr('id');
          idField = idField.replace(/ /g, '_');
          $j(this).attr('id',idField);
        });
      }

      function scrollToHeader(headerId) {
        $j('[id$="' + headerId + '"]').get(0).scrollIntoView();
      }
  </script>
  <style>
    /* Auto Complete Styling (because if we include all of jquery UI it makes everything look bad/different) */
    .ui-helper-hidden-accessible {
      border: 0;
      clip: rect(0 0 0 0);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
        }

    .ui-autocomplete {
      position: absolute;
      top: 100%;
      left: 0;
      z-index: 1000;
      float: left;
      display: none;
      min-width: 160px;
      _width: 160px;
      padding: 4px 0;
      margin: 2px 0 0 0;
      list-style: none;
      background-color: #ffffff;
      border-color: #ccc;
      border-color: rgba(0, 0, 0, 0.2);
      border-style: solid;
      border-width: 1px;
      -webkit-border-radius: 5px;
      -moz-border-radius: 5px;
      border-radius: 5px;
      -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
      -moz-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
      box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
      -webkit-background-clip: padding-box;
      -moz-background-clip: padding;
      background-clip: padding-box;
      *border-right-width: 2px;
      *border-bottom-width: 2px;
       
      .ui-menu-item > a.ui-corner-all {
      display: block;
      padding: 3px 15px;
      clear: both;
      font-weight: normal;
      line-height: 18px;
      color: #555555;
      white-space: nowrap;
     
        .ui-widget-content .ui-state-focus {
        color: #ffffff;
        text-decoration: none;
        background-color: #0088cc;
        border-radius: 0px;
        -webkit-border-radius: 0px;
        -moz-border-radius: 0px;
        background-image: none;
        }
      }
    }
  /* End Autocomplete styling */
  </style>

    <apex:form id="projectForm">
      <apex:outputPanel rendered="{!!IsReadOnly}">
        <div id="tabs">
            <ul id="nav">
                <li style="outline: none;"><a href="#projects">{!$Label.Projects}</a></li>
                <li style="outline: none; padding-left: 18px;"><a href="#nonaeprojects">{!$Label.Non_AECOM_Projects}</a></li>
                <li style="outline: none; padding-left: 18px;"><a href="#generateResume">{!$Label.Generate_CV_Resume}</a></li>
            </ul>
            <br/>  
            <apex:outputPanel id="messages">
                <apex:outputPanel layout="none"  rendered="{!showMessages}">
                    <br/>
                    <div class="pull-left">
                        <apex:pageMessages escape="false" />
                    </div>
                </apex:outputPanel>
            </apex:outputPanel>
            <div class="clearfix"/>
            <br/>
            <div style="padding-bottom:8px;"></div>
            <div id="projects">
                 <c:rsProjectComponent rsProfile="{!Profile}" id="projexp" reRender="projexp,nonAECOM,messages"/>
            </div>
            <div id="nonaeprojects">
               <c:rsNonAECOMProjectComponent rsProfile="{!Profile}" id="nonAECOM" reRender="nonAECOM,messages,projexp"/>
            </div>
            <div id="generateResume">
                <c:rsGenerateResumeComponent userIdList="{!UserIdList}"/>
            </div>
        </div>
        <c:rsPolicyGuidance />
      </apex:outputPanel>
      <apex:outputPanel rendered="{!IsReadOnly}">
        <apex:pageMessage summary="{!$Label.Read_Only_Profile_Message}" severity="info"/>
      </apex:outputPanel>
    </apex:form>
</apex:page>